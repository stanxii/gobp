// Code generated by protoc-gen-go. DO NOT EDIT.
// source: downvideo.proto

package downvideo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DVRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DVRequest) Reset()         { *m = DVRequest{} }
func (m *DVRequest) String() string { return proto.CompactTextString(m) }
func (*DVRequest) ProtoMessage()    {}
func (*DVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2e7687f92af5b85, []int{0}
}

func (m *DVRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DVRequest.Unmarshal(m, b)
}
func (m *DVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DVRequest.Marshal(b, m, deterministic)
}
func (m *DVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVRequest.Merge(m, src)
}
func (m *DVRequest) XXX_Size() int {
	return xxx_messageInfo_DVRequest.Size(m)
}
func (m *DVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DVRequest proto.InternalMessageInfo

func (m *DVRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DVReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DVReply) Reset()         { *m = DVReply{} }
func (m *DVReply) String() string { return proto.CompactTextString(m) }
func (*DVReply) ProtoMessage()    {}
func (*DVReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2e7687f92af5b85, []int{1}
}

func (m *DVReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DVReply.Unmarshal(m, b)
}
func (m *DVReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DVReply.Marshal(b, m, deterministic)
}
func (m *DVReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVReply.Merge(m, src)
}
func (m *DVReply) XXX_Size() int {
	return xxx_messageInfo_DVReply.Size(m)
}
func (m *DVReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DVReply.DiscardUnknown(m)
}

var xxx_messageInfo_DVReply proto.InternalMessageInfo

func (m *DVReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DVRequest)(nil), "downvideo.DVRequest")
	proto.RegisterType((*DVReply)(nil), "downvideo.DVReply")
}

func init() { proto.RegisterFile("downvideo.proto", fileDescriptor_b2e7687f92af5b85) }

var fileDescriptor_b2e7687f92af5b85 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xc9, 0x2f, 0xcf,
	0x2b, 0xcb, 0x4c, 0x49, 0xcd, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xc9, 0x73, 0x71, 0xba, 0x84, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1,
	0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xca, 0x5c,
	0xec, 0x20, 0x05, 0x05, 0x39, 0x95, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9,
	0x30, 0x15, 0x30, 0xae, 0x91, 0x07, 0x17, 0xa7, 0x4b, 0x7e, 0x79, 0x5e, 0x18, 0xc8, 0x48, 0x21,
	0x6b, 0x2e, 0x5e, 0x10, 0x27, 0x27, 0x3f, 0x31, 0x05, 0x22, 0x20, 0xa2, 0x87, 0x70, 0x00, 0xdc,
	0x32, 0x29, 0x21, 0x34, 0xd1, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x0b, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x8a, 0xa3, 0x09, 0xb4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DownVideoClient is the client API for DownVideo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownVideoClient interface {
	DownloadVideo(ctx context.Context, in *DVRequest, opts ...grpc.CallOption) (*DVReply, error)
}

type downVideoClient struct {
	cc *grpc.ClientConn
}

func NewDownVideoClient(cc *grpc.ClientConn) DownVideoClient {
	return &downVideoClient{cc}
}

func (c *downVideoClient) DownloadVideo(ctx context.Context, in *DVRequest, opts ...grpc.CallOption) (*DVReply, error) {
	out := new(DVReply)
	err := c.cc.Invoke(ctx, "/downvideo.DownVideo/DownloadVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownVideoServer is the server API for DownVideo service.
type DownVideoServer interface {
	DownloadVideo(context.Context, *DVRequest) (*DVReply, error)
}

func RegisterDownVideoServer(s *grpc.Server, srv DownVideoServer) {
	s.RegisterService(&_DownVideo_serviceDesc, srv)
}

func _DownVideo_DownloadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownVideoServer).DownloadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/downvideo.DownVideo/DownloadVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownVideoServer).DownloadVideo(ctx, req.(*DVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DownVideo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "downvideo.DownVideo",
	HandlerType: (*DownVideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadVideo",
			Handler:    _DownVideo_DownloadVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "downvideo.proto",
}
