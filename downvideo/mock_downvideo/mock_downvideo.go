// Code generated by MockGen. DO NOT EDIT.
// Source: ../grpc/proto/downvideo.pb.go

// Package mock_downvideo is a generated GoMock package.
package mock_downvideo

import (
	context "context"
	proto "downvideo/grpc/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDownVideoClient is a mock of DownVideoClient interface
type MockDownVideoClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownVideoClientMockRecorder
}

// MockDownVideoClientMockRecorder is the mock recorder for MockDownVideoClient
type MockDownVideoClientMockRecorder struct {
	mock *MockDownVideoClient
}

// NewMockDownVideoClient creates a new mock instance
func NewMockDownVideoClient(ctrl *gomock.Controller) *MockDownVideoClient {
	mock := &MockDownVideoClient{ctrl: ctrl}
	mock.recorder = &MockDownVideoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownVideoClient) EXPECT() *MockDownVideoClientMockRecorder {
	return m.recorder
}

// DownloadVideo mocks base method
func (m *MockDownVideoClient) DownloadVideo(ctx context.Context, in *proto.DVRequest, opts ...grpc.CallOption) (*proto.DVReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadVideo", varargs...)
	ret0, _ := ret[0].(*proto.DVReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadVideo indicates an expected call of DownloadVideo
func (mr *MockDownVideoClientMockRecorder) DownloadVideo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadVideo", reflect.TypeOf((*MockDownVideoClient)(nil).DownloadVideo), varargs...)
}

// MockDownVideoServer is a mock of DownVideoServer interface
type MockDownVideoServer struct {
	ctrl     *gomock.Controller
	recorder *MockDownVideoServerMockRecorder
}

// MockDownVideoServerMockRecorder is the mock recorder for MockDownVideoServer
type MockDownVideoServerMockRecorder struct {
	mock *MockDownVideoServer
}

// NewMockDownVideoServer creates a new mock instance
func NewMockDownVideoServer(ctrl *gomock.Controller) *MockDownVideoServer {
	mock := &MockDownVideoServer{ctrl: ctrl}
	mock.recorder = &MockDownVideoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownVideoServer) EXPECT() *MockDownVideoServerMockRecorder {
	return m.recorder
}

// DownloadVideo mocks base method
func (m *MockDownVideoServer) DownloadVideo(arg0 context.Context, arg1 *proto.DVRequest) (*proto.DVReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadVideo", arg0, arg1)
	ret0, _ := ret[0].(*proto.DVReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadVideo indicates an expected call of DownloadVideo
func (mr *MockDownVideoServerMockRecorder) DownloadVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadVideo", reflect.TypeOf((*MockDownVideoServer)(nil).DownloadVideo), arg0, arg1)
}
